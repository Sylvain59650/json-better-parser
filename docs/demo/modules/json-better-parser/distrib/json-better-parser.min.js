(function (a, b) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], b);
  } else if (typeof exports !== "undefined") {
    b(exports);
  } else {
    var c = {
      exports: {}
    };
    b(c.exports);
    a.JSONEx = c.exports;
  }
})(this, function (a) {
  "use strict";

  Object.defineProperty(a, "__esModule", {
    value: true
  });

  function b(a, b) {
    if (!(a instanceof b)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function c(a, b) {
    if (!a) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return b && (typeof b === "object" || typeof b === "function") ? b : a;
  }

  function d(a, b) {
    if (typeof b !== "function" && b !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    }

    a.prototype = Object.create(b && b.prototype, {
      constructor: {
        value: a,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (b) Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b;
  }

  var j = function (a) {
    d(e, a);

    function e() {
      b(this, e);
      return c(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments));
    }

    return e;
  }(Error);

  var k = "";
  var m = 0;
  var l = [];
  var n = 0;
  var o = 0;

  var p = null;
  var q = false;

  var r = {
    isLetter: function a(b) {
      return b.match(/[A-Za-z]/);
    },
    isDigit: function a(b) {
      return b.match(/[0-9]/);
    },
    isWhitespace: function a(b) {
      return b.match(/\s/);
    },
    isNewline: function a(b) {
      return b.match(/\n/);
    },

    insert: function a(b, c) {
      k = k.slice(0, m) + b + k.slice(m);
      if (c) {
        m += c;
      }
    },
    replace: function a(b, c) {
      k = k.slice(0, m) + b + k.slice(m + 1);
      if (c) {
        m += c;
      }
    },
    insertAtWord: function a(b) {
      k = k.slice(0, n) + b + k.slice(n);
    },
    remove: function a() {
      k = k.slice(0, m) + k.slice(m + 1);
      m--;
    },
    removePreviousComma: function a() {
      if (k[m - 1] === ",") {
        k = k.slice(0, m - 1) + k.slice(m);
        m--;
      }
    },
    removeSpace: function a() {
      var b = k.length;
      while (m < b && r.isWhitespace(k[m])) {
        m++;
      }
      var c = k[m];
      o = m;
      return c;
    },

    pass: function a(b) {
      var c = m;
      while (b.indexOf(k[c]) >= 0) {
        c++;
      }
      m = c;
      o = m;
      return k[c];
    },

    push: function a(b) {
      l.push(b);
      o = m;
    },
    pop: function a() {
      l.pop();
      o = m;
    },
    check: function a(b, c, d) {
      n = m;
      if (k.substr(m, b.length) === b) {
        var e = k[m + b.length];
        if (e === "," || e === "}" || e === "]" || e === " ") {
          m += b.length - 1;
          return c;
        }
        m--;
        return d;
      }
      return d;
    },
    next: function a(b) {
      var c = k.length;
      while (m < c && b.indexOf(k[m]) === -1) {
        m++;
      }
      return k[m];
    },
    insertAtEndWordPos: function a(b) {
      var c = m - 1;
      while (c >= 0 && r.isWhitespace(k[c])) {
        c--;
      }
      c++;
      k = k.slice(0, c) + b + k.slice(c);
      m++;
    },

    lexical: function a(b, c) {
      var d = l[l.length - 1];
      switch (b) {
        case "start":
          c = r.removeSpace();
          if (c === "{") {
            r.push("obj");
            return "obj_awaiting_key";
          }
          break;

        case "obj_awaiting_key":
          c = r.removeSpace();
          if (c === "}") {
            r.removePreviousComma();
            r.pop();
            return "obj_complete";
          }
          if (c === "\"") {
            return "obj_key_str";
          }
          if (c === "'") {
            r.replace("\"");
            return "obj_key_str_incorrect_quotes";
          }
          if (r.isLetter(c) || r.isDigit(c) || c === "-") {
            r.insert("\"", 1);
            return "obj_key_str_missing_left_quote";
          }
          break;

        case "obj_key_str_missing_left_quote":
          c = r.next(":\"'");
          if (c === ":") {
            o = m;
            r.insertAtEndWordPos("\"");
            return "obj_awaiting_value";
          }
          if (c === "\"") {
            return "obj_awaiting_colon";
          }
          if (c === "'") {
            r.replace("\"", 1);
            m--;
            return "obj_awaiting_colon";
          }
          break;

        case "obj_key_str_incorrect_quotes":
          if (c === "'") {
            r.replace("\"");
            return "obj_awaiting_colon";
          }
          break;

        case "obj_key_str":
          if (c === "\"") {
            return "obj_awaiting_colon";
          }
          break;

        case "obj_awaiting_colon":
          if (c === ":") {
            o = m;
            return "obj_awaiting_value";
          }
          break;

        case "obj_awaiting_value":
          c = r.removeSpace();
          if (c === "'") {
            r.replace("\"");
            return "obj_value_str_incorrect_quotes";
          }
          if (c === "{") {
            r.push("obj");
            return "obj_awaiting_key";
          }
          if (c === "[") {
            r.push("arr");
            return "arr_stable";
          }
          if (c === "\"") {
            return "obj_value_str";
          }
          if (r.isDigit(c)) {
            return "obj_value_num";
          }
          if (c === "-") {
            return "obj_value_num";
          }

          if (c === "t") {
            return r.check("true", "obj_stable", "obj_missing_left_quote");
          }
          if (c === "f") {
            return r.check("false", "obj_stable", "obj_missing_left_quote");
          }
          if (c === "n") {
            return r.check("null", "obj_stable", "obj_missing_left_quote");
          }
          break;

        case "obj_missing_left_quote":
          r.insertAtWord("\"");
          return "obj_value_str_incorrect_quotes";

        case "obj_value_str":
          c = r.next("\"}");
          if (c === "\"") {
            return "obj_stable";
          }
          if (c === "}") {
            r.insert("\"");
            r.pop();
            if (d === "obj") {
              return "obj_complete";
            }
            return "obj_stable";
          }
          break;

        case "obj_value_str_incorrect_quotes":
          c = r.next("',}");
          if (c === "'") {
            r.replace("\"");
            return "obj_stable";
          }
          if (c === ",") {
            r.insert("\"");
            return "obj_stable";
          }
          if (c === "}") {
            r.replace("\"}");
            r.pop();
            return "obj_complete";
          }
          break;

        case "obj_value_num":
          c = r.pass("0123456789.");
          c = r.removeSpace();
          if (c === "}") {
            r.pop();
            return "obj_complete";
          }
          if (c === ",") {
            return "obj_awaiting_key";
          }
          return "obj_value_num_error";

        case "obj_stable":
          o = m;
          c = r.next("},");
          if (c === "}") {
            r.pop();
            return "obj_complete";
          }
          if (c === ",") {
            return "obj_awaiting_key";
          }
          break;

        case "obj_complete":
          o = m;
          if (c === "]") {
            r.pop();
            return "arr_complete";
          }
          if (r.isNewline(c)) {
            r.replace(",");
            if (d === "obj") {
              return "obj_awaiting_key";
            }
            return "arr_awaiting_value";
          }
          if (c === ",") {
            if (d === "obj") {
              return "obj_awaiting_key";
            }
            return "arr_awaiting_value";
          }
          break;

        case "arr_stable":
          o = m;
          if (r.isWhitespace(c)) {
            r.remove();
          }
          if (c === "'") {
            r.replace("\"");
            return "arr_value_str_incorrect_quotes";
          }
          if (c === "{") {
            r.push("obj");
            return "obj_awaiting_key";
          }
          if (c === "[") {
            r.push("arr");
            return "arr_stable";
          }
          if (c === "]") {
            r.pop();
            return "arr_complete";
          }
          if (c === "\"") {
            return "arr_value_str";
          }
          if (r.isDigit(c)) {
            return "arr_value_num";
          }
          if (c === "-") {
            return "arr_value_num";
          }
          if (c === "t") {
            return r.check("true", "arr_stable", "arr_error");
          }
          if (c === "f") {
            return r.check("false", "arr_stable", "arr_error");
          }
          if (c === "n") {
            return r.check("null", "arr_stable", "arr_error");
          }
          break;

        case "arr_awaiting_value":
          c = r.removeSpace();
          if (c === "'") {
            r.replace("\"");
            return "arr_value_str_incorrect_quotes";
          }
          if (c === "{") {
            r.push("obj");
            return "obj_awaiting_key";
          }
          if (c === "[") {
            r.push("arr");
            return "arr_stable";
          }
          if (c === "]") {
            r.removePreviousComma();
            r.pop();
            return "arr_complete";
          }
          if (c === "\"") {
            return "arr_value_str";
          }
          if (r.isDigit(c)) {
            return "arr_value_num";
          }
          if (c === "-") {
            return "arr_value_num";
          }
          if (c === "t") {
            return r.check("true", "arr_stable", "arr_error");
          }
          if (c === "f") {
            return r.check("false", "arr_stable", "arr_error");
          }
          if (c === "n") {
            return r.check("null", "arr_stable", "arr_error");
          }
          break;

        case "arr_complete":
          o = m;
          if (c === "}") {
            r.pop();
            return "obj_complete";
          }
          if (r.isNewline(c)) {
            if (d === "obj") {
              return "obj_awaiting_key";
            }
            return "arr_awaiting_value";
          }
          if (c === ",") {
            if (d === "obj") {
              return "obj_awaiting_key";
            }
            return "arr_awaiting_value";
          }
          break;

        case "arr_value_str":
          if (c === "\"") {
            return "arr_stable";
          }
          break;

        case "arr_value_str_incorrect_quotes":
          if (c === "'") {
            r.replace("\"");
            return "arr_stable";
          }
          break;

        case "arr_value_num":
          c = r.pass("0123456789.");
          c = r.removeSpace();
          if (c === "]") {
            r.pop();
            return "arr_complete";
          }
          if (c === ",") {
            return "arr_awaiting_value";
          }
          break;
        default:
          break;
      }

      return b;
    },

    error: function a(b, c) {
      var d = 20;
      var e = b.message.match(/^Unexpected token.*position\s+(\d+)/i);
      var f = e ? Number(e[1]) : b.message.match(/^Unexpected end of JSON.*/i) ? c.length - 1 : null;
      var g = b.message;
      if (f !== null) {
        var i = f <= d ? 0 : f - d;
        var j = f + d >= c.length ? c.length : f + d;
        var h = c.slice(i, j);
        g += " while parsing near \n" + h + "\n" + "-".repeat(f) + "^";
      } else {
        g += " while parsing " + c.slice(0, d * 2);
      }
      return g;
    }
  };

  function e(a) {
    var b = "start";
    l = [];
    k = a;
    m = 0;
    var c = "";
    while (m < k.length) {
      c = k[m];
      b = r.lexical(b, c);
      m++;
    }
    if (b !== "obj_complete") {
      var d = o - 20 < 0 ? 0 : o - 20;
      var e = o + 20 >= k.length ? k.length : o + 20;
      var f = k.substring(d, e) + "\n" + "-".repeat(20) + "^";
      throw new j("Error: Second chance: parse error at position " + m + " with state " + b + " after \n" + f);
    }
    return k;
  }

  function f(a) {
    try {
      return p.parse(a);
    } catch (d) {
      try {
        var b = e(a);
        return p.parse(b);
      } catch (e) {
        var c = r.error(d, a) + "\n";
        if (e instanceof j) {
          c += e.message;
        } else {
          c += r.error(e, b || "");
        }
        throw c;
      }
    }
  }

  function g() {
    if (!q) {
      p = JSON;
      q = true;
      JSON = this;
    }
  }

  function h() {
    if (q) {
      JSON = p;
      q = false;
    }
  }

  function i(a) {
    return p.stringify(a);
  }

  p = JSON;

  a.parse = f;
  a.correct = e;
  a.stringify = i;
  a.revertToNativeJson = h;
  a.replaceNativeJson = g;
});